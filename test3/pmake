#!/usr/bin/perl
# Your name and username@ucsc.edu 
use strict;
use warnings;

#open file
sub ltrim { my $s = shift; $s =~ s/^\s+//; return $s };
my %targets;
my %commands; 
my %macros;
my $exitStatus = 0;
# go through file once, store target with its prereqs and its commands into a hash
# Then, make the target and recursively call its prereqs by looking through the hashtable.
#

sub mtime ($){
	my ($filename) = @_;
	my @stat = stat $filename;
	return @stat ? $stat[9] : undef;
}

sub getMacros{
	my ($input) = @_;
	#print STDOUT "inside getMacro, input is: $input\n";
	if($input =~ /{+/){
		my @macroNames = split /\s+/, $input;
		#my $finished = 0;
		for (my $i = 0; $i < @macroNames; ++$i){
	#		print STDOUT $macroNames[$i];
			if ($macroNames[$i] =~ /{+/){
	#			print STDOUT "here1\n";
				my $parseName = substr $macroNames[$i], 2, -1; 
	#			print STDOUT "new name is: $parseName\n";
				if (defined ($macros{$parseName})){
	#				print STDOUT "here2\n";
					$macroNames[$i] = $macros{$parseName};
				}
			}else{
	#			print STDOUT "here3\n";
				$macroNames[$i] = $targets{$macroNames[$i]};
			}
	#		print STDOUT "\nafter hash: $macroNames[$i]\n";
		}
		my $output = join ' ', @macroNames;
		my $finished = $output;
		$finished =~ /{+/;
	#	print STDOUT "finished getting macro, output: $finished\n";
		if(not ($finished)) {
	#		print STDOUT "finished getting macro, output: $output---\n";
			return $output;
		}else{
	#		print STDOUT "resursive call\n";
			return getMacros($output);
		}
	}else{
		return $input;
	}
}

sub makeTarget{
	my ($input) = @_;
	
	############ substitute target and prereqs with macros here #############
	my $target = getMacros($input);
#	print STDOUT "in make target, new target is: $target\n";
	my @prereqs;
	my $prereqsExist = 1;
	my $hashValue = $targets{$target};
#	print "my target is: $target\n";
	#print "hash value is: $hashValue --\n";
	
	
	if(not (defined ($hashValue))){   
		$prereqsExist = 0;
	}
	else{
		@prereqs = split " ",$targets{$target};
		#loop through prereq array
#		for(my $i =0; $i<  @prereqs; ++$i){
#			print STDOUT "prereq at $i is: $prereqs[$i]\n";
#		 	$prereqs[$i] = getMacros($prereqs[$i]);
#			print STDOUT "prereq after getMacro is: $prereqs[$i] \n";
			#if get macros returns a list of macros, when to split?
			
#		}
	}
	
	if($prereqsExist){
		for (my $j = 0; $j < @prereqs ; ++$j){
	#		print STDOUT "looping through prereqs \n";
		#check if prereq is a file by checking the target hash
			if (-e $prereqs[$j]){
				my $fileTime = mtime ($prereqs[$j]);
				my $targetTime = mtime ($target);
				if (defined ($targetTime)){
					if ($fileTime > $targetTime){
	#					print STDOUT "heerererrern\n";
						
					}else{
	#					print STDOUT "2918390128390123\n";
					#	makeTarget($prereqs[$j]);
						#throw an error, target obsolete
					}
				}else{
#					print STDOUT "$target does not exist\n";
				#	makeTarget($prereqs[$j]);
	#				print STDOUT "$target does not exist\n";
				}			
			}else{
				print STDOUT "calling makeTarget for: $prereqs[$j]\n";
				makeTarget($prereqs[$j]);
			}
		}

	}
	
	#print STDOUT "done making prereqs\n";
#	print STDOUT "beginning commands, command is: $commands{$target}\n";
#	my @execute;
#	if (defined ($commands{$target})){
		my @execute = split /"\n"/, $commands{$target};
#	}
	for (my $i = 0; $i < @execute ; ++$i){
		my @parseExecute = split /\s+/ ,$execute[$i];
        	for(my $j =0; $j <@parseExecute; ++$j){
                	$parseExecute[$j] = getMacros($parseExecute[$j]);
        	}
        	my $afterMacrosWord = join ' ', @parseExecute;
        	my $wor = ltrim($afterMacrosWord);
        	my @newExecute = split /\s+/, $wor;
        	print STDOUT "$wor\n";

		if($newExecute[0] eq "@"){
			my $deleteAt = substr($wor, 3);
			system($deleteAt);
			#check exit status and signal
		}elsif ($newExecute[0] eq "-"){
			#does not exit?
			my $deleteAt = substr($wor, 2);
		#	print STDOUT "- command: $deleteAt\n";
			system($deleteAt);
		}else{
			system($wor);
			#check exit status and signal
		}
	}
}

for my $targetName ($ARGV[0]) {
	open my $file, "Makefile" or warn "$0: Makefile: $!\n" and next;
	while (defined (my $line = <$file>)) {
		unless($line =~ /^\s*$/) {
			chomp($line);
			ltrim($line);
			my @words = split /\s+/, $line;

			#first check if comment
			#then check if macro
			#then check if target
			if($words[0] ne "#"){
				if($words[1] eq "="){
					my @macroTest = @words[2 .. $#words];
					my $macroString = join ' ', @macroTest;
					$macros{$words[0]}= $macroString;
#					print STDOUT "Macros for $words[0] are $macros{$words[0]}\n"; 
				}
				if($words[1] eq ":"){
					#target could be a macro, if first char of words[0] is $ then look up macro and update words[0]
					if (@words > 2){
						my @test = @words[2 .. $#words];
						for (my $i = 0; $i < @test; ++$i){
							$test[$i] = getMacros($test[$i]);
						}
						my $testString = join ' ',@test;
						#$targets{$words[0]} = $testString;		 
						$targets{getMacros($words[0])} =$testString; 
					}
					my $nextline = <$file>;
					chomp($nextline);
					ltrim($nextline);
					#print STDOUT "nextline is: $nextline";
					while (not ($nextline =~ /^\s*$/)){
					#print STDOUT "nextline is: $nextline\n";
						if (not(defined($commands{$words[0]}))){
							$commands{getMacros($words[0])} = $nextline;
						}else{
							$commands{getMacros($words[0])} = $commands{$words[0]}."\n".$nextline; 
						}
						$nextline = <$file>;
					}
				}
			}
		}
	}	
	close $file;	
	makeTarget $targetName;	
}

