#!/usr/bin/perl
# Your name and username@ucsc.edu 
use strict;
use warnings;

#open file
sub ltrim { my $s = shift; $s =~ s/^\s+//; return $s };
my %targets;
my %commands;
# go through file once, store target with its prereqs and its commands into a hash
# Then, make the target and recursively call its prereqs by looking through the hashtable.
#


sub makeTarget{
	my ($target) = @_;
#	print "my target is: $target\n";
	
	my @prereqs = $targets{$target};
#	for (my $k = 0; $k < @prereqs; ++$k){
#		print STDOUT "$k: $prereqs[$k], ";
 #       }
	#print STDOUT @prereqs;
#	print STDOUT "\nADJKLDJALSKJDKLAS\n";
	if (not (@prereqs)){
		#execute the commandi
		print STDOUT "prereq not defined\n";
		my @execute = split /"\n"/, $commands{$target};
		for (my $i = 0; $i < @execute ; ++$i){
			print STDOUT $execute[$i];
			system($execute[$i]);
		}
	}else{
		print STDOUT "prereq defined\n";
		for (my $j = 0; $j < @prereqs ; ++$j){
		#check if prereq is a file by checking the target hash
		#check time stamp between target and prereq[i] if file
		#if not file makeTarget the prereq
			print STDOUT "$j: recursive call on: $prereqs[$j]\n";
			makeTarget($prereqs[$j]);
		}
	}

}

for my $targetName ($ARGV[0]) {
	open my $file, "test0/Makefile" or warn "$0: Makefile: $!\n" and next;
	while (defined (my $line = <$file>)) {
		unless($line =~ /^\s*$/) {
		#	print STDOUT $line;
			chomp($line);
			ltrim($line);
			my @words = split /\s+/, $line;
#			print STDOUT "\n----";
#			for (my $i = 0; $i < @words; ++$i){
#				print "$i: ";
#				print STDOUT $words[$i];
#				print "--";
#			}
			print "\n";
			if($words[0] ne "#"){
				if($words[1] eq ":"){
					print STDOUT "here 3";	
					if (@words > 2){
						my @test = @words[2 .. $#words];
						for (my $k = 0; $k < @test; ++$k){
                                                       print STDOUT "$k: $test[$k], ";
						}
						print STDOUT "\n";
						print STDOUT "storing this to hash tbl: $words[0]";
						$targets{$words[0]} = @test[0 .. $#test];		
                                          
					}
					my $nextline = <$file>;
					chomp($nextline);
					ltrim($nextline);
					#print STDOUT "nextline is: $nextline";
					while (not ($nextline =~ /^\s*$/)){
					#print STDOUT "nextline is: $nextline\n";
						if (not(defined($commands{$words[0]}))){
							$commands{$words[0]} = $nextline;
						}else{
							$commands{$words[0]} = $commands{$words[0]}."\n".$nextline; 
						}
						$nextline = <$file>;
					}
				}
			}
		#	print ($line, "\n");
		}
	}
	# /\s+/ one or more whitespace.. 		
	# #if words[0] is # ignore line 	
	close $file;	
	print STDOUT $targetName;
	makeTarget $targetName;	
}
#read lines while defined,
#if line compare to whitespace is true, ignore
#if trimmed and substring(0,1) = # OR use split string and check a[0], ignore


#MACROS
#	makeTarget $targetName; 


#sub makeTarget{
#	my $target = @_;
#	my @prereqs = $targets{$target};
#	if (@prereqs eq undef){
#		#execute the command
#		my @execute = split /"\n"/, $commands{$target};
#		for (my $i = 0; $i < @execute ; $i++){
#			print STDOUT $execute[$i];
#			system($execute[$i]);
#		}
#	}else{
#		for (my $j = 0; $j < @prereqs ; $j++){
#		#check if prereq is a file by checking the target hash
#		#check time stamp between target and prereq[i] if file
#		#if not file makeTarget the prereq
#			makeTarget $prereqs[$j];
#		}
#	}
#
#}
